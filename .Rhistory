View(astronauts)
?str_to_sentence
library(tidyverse)
library(tidytuesdayR)
data <- tt_load(2020, week = 32)
View(data)
en_types <- data$energy_types
country <- data$country_totals
View(country)
View(en_types)
en_types$country_name[is.na(en_types$country_name) & en_types$country == "UK"] <- "United Kingdom"
View(country)
en_types$country_name[is.na(en_types$country_name) & en_types$country == "UK"] <- "United Kingdom"
country$country_name[is.na(country$country_name) & country$country == "UK"] <- "United Kingdom"
nuke_prod <- en_types %>% filter(type == "Nuclear")
View(nuke_prod)
ggplot(data = en_types, aes(x = type, y = 2016) + geom_bar()
ggplot(data = en_types, aes(x = type, y = 2016)) + geom_bar()
ggplot(data = en_types, aes(x = type, y = 2016)) + geom_bar()
ggplot(data = en_types, aes(y = 2016)) + geom_bar()
ggplot(data = en_types, aes(x = 2016)) + geom_bar()
glimpse(nuke_prod)
ggplot(data = en_types, aes(x = country_name, y = `2016`)) + geom_bar()
ggplot(data = en_types, aes(x = country_name, y = `2016`)) + geom_bar(stat = "identity")
ggplot(data = en_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
nuc_ctrys <- en_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(desc(nuc_pct)) %>%
select(country_name) %>%
pull()
# Make country_name a factor based on the order we made earlier.
en_types$country_name <- factor(energy_types$country_name, nuc_ctrys)
ggplot(data = en_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
nuc_ctrys <- en_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(desc(nuc_pct)) %>%
select(country_name) %>%
pull()
# Make country_name a factor based on the order we made earlier.
en_types$country_name <- factor(en_types$country_name, nuc_ctrys)
ggplot(data = en_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
View(nuc_ctrys)
en_types$type <- forcats::fct_relevel(en_types$type, "Nuclear")
# Get list of country names ordered by nuclear's percent of total.
# This list will be used later to order the factor for sorting on the chart.
nuc_ctrys <- en_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(desc(nuc_pct)) %>%
select(country_name) %>%
pull()
# Make country_name a factor based on the order we made earlier.
en_types$country_name <- factor(en_types$country_name, nuc_ctrys)
ggplot(data = en_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
nuc_ctrys <- en_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(-nuc_pct) %>%
select(country_name) %>%
pull()
library(tidyverse)
library(tidytuesdayR)
nuc_ctrys <- en_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(-nuc_pct) %>%
select(country_name) %>%
pull()
data <- tt_load(2020, week = 32)
energy_types <- data$energy_types
country_totals <- data$country_totals
energy_types$country_name[is.na(energy_types$country_name) & energy_types$country == "UK"] <- "United Kingdom"
country_types$country_name[is.na(country_types$country_name) & country_types$country == "UK"] <- "United Kingdom"
# plot nuclear energy production of each country
nuke_prod <- energy_types %>% filter(type == "Nuclear")
ggplot(data = energy_types, aes(x = country_name, y = `2016`)) + geom_bar(stat = "identity")
# Reorder Nuclear to be the first energy type in the legend.
energy_types$type <- forcats::fct_relevel(energy_types$type, "Nuclear")
# Get list of country names ordered by nuclear's percent of total.
# This list will be used later to order the factor for sorting on the chart.
nuc_ctrys <- energy_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(-nuc_pct) %>%
select(country_name) %>%
pull()
# Make country_name a factor based on the order we made earlier.
energy_types$country_name <- factor(energy_types$country_name, nuc_ctrys)
ggplot(data = energy_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
data <- tt_load(2020, week = 32)
energy_types <- data$energy_types
country_totals <- data$country_totals
energy_types$country_name[is.na(energy_types$country_name) & energy_types$country == "UK"] <- "United Kingdom"
country_totals$country_name[is.na(country_totals$country_name) & country_totals$country == "UK"] <- "United Kingdom"
# plot nuclear energy production of each country
nuke_prod <- energy_types %>% filter(type == "Nuclear")
ggplot(data = energy_types, aes(x = country_name, y = `2016`)) + geom_bar(stat = "identity")
# Reorder Nuclear to be the first energy type in the legend.
energy_types$type <- forcats::fct_relevel(energy_types$type, "Nuclear")
# Get list of country names ordered by nuclear's percent of total.
# This list will be used later to order the factor for sorting on the chart.
nuc_ctrys <- energy_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(-nuc_pct) %>%
select(country_name) %>%
pull()
# Make country_name a factor based on the order we made earlier.
energy_types$country_name <- factor(energy_types$country_name, nuc_ctrys)
ggplot(data = energy_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
library(tidyverse)
library(rvest)
# Hospital TBI data -------------------------------------------------------
all_years <- read_html("https://www.cdc.gov/traumaticbraininjury/data/tbi-edhd.html") %>%
html_node(xpath = '//*[@id="acc-panel-1"]/div/div/table/thead/tr') %>%
html_text() %>%
str_split("\\\n") %>%
str_extract_all("[0-9]+") %>%
simplify()
hospital_url <- "https://www.cdc.gov/traumaticbraininjury/data/tbi-edhd.html"
raw_html_hospital <- read_html(url)
get_table_row <- function(input_html, tab_num){
node <- html_node(input_html, xpath = glue::glue('//*[@id="acc-panel-1"]/div/div/table/tbody/tr[{tab_num}]'))
html_text(node)
}
tbi_hospital <- tibble(
input_html = list(raw_html_hospital),
tab_num = 1:4
) %>%
mutate(raw_data = map2_chr(input_html, tab_num, get_table_row)) %>%
separate(raw_data, into = c("type", all_years), sep = "\\\n") %>%
select(-tab_num,-input_html) %>%
pivot_longer(cols = -type, values_to = "value", names_to = "year") %>%
mutate(value = parse_number(value),
year = as.double(year))
raw_html_hospital <- read_html(url)
raw_html_hospital <- read_html(hospital_url)
get_table_row <- function(input_html, tab_num){
node <- html_node(input_html, xpath = glue::glue('//*[@id="acc-panel-1"]/div/div/table/tbody/tr[{tab_num}]'))
html_text(node)
}
tbi_hospital <- tibble(
input_html = list(raw_html_hospital),
tab_num = 1:4
) %>%
mutate(raw_data = map2_chr(input_html, tab_num, get_table_row)) %>%
separate(raw_data, into = c("type", all_years), sep = "\\\n") %>%
select(-tab_num,-input_html) %>%
pivot_longer(cols = -type, values_to = "value", names_to = "year") %>%
mutate(value = parse_number(value),
year = as.double(year))
View(tbi_hospital)
library(tidytuesdayR)
data <- tt_load(2020, week = 52)
View(data)
data <- data$`big-mac`
View(data)
df_asean <- data %>% filter(name %in% ("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam")
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam"))
df_asean <- data %>% filter(name %in% ("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam"))
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam"))
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam"))
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam"))
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam", "Phillipines"))
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam", "Philippines"))
library(tidyverse)
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam", "Philippines"))
View(df_asean)
ggplot(data = df_asean, aes(x = date, y = local_price, fill = name)) + geom_line()
ggplot(data = df_asean, aes(x = date, y = local_price, fill = name)) + geom_line(stat = "identity")
ggplot(data = df_asean, aes(x = date, y = local_price, fill = factor(name))) + geom_line()
library(tidytuesdayR)
library(tidyverse)
tidytuesday <- tt_load(2020, week = 52)
data <- tidytuesday$`big-mac`
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam", "Philippines"))
ggplot(data = df_asean, aes(x = date, y = local_price, fill = factor(name))) + geom_line()
ggplot(data = df_asean, aes(x = date, y = local_price)) + geom_line(aes(color = name))
ggplot(data = df_asean, aes(x = date, y = dollar_price)) + geom_line(aes(color = name))
ggplotly(ggplot(data = df_asean, aes(x = date, y = dollar_price)) + geom_line(aes(color = name)))
df_idn <- data %>% filter(name == "Indonesia")
ggplotly(ggplot(data = df_idn, aes(x = date, y = dollar_price)) + geom_line(aes(color = name)))
ggplot(data = df_idn, aes(x = date, y = dollar_price)) + geom_line(aes(color = name))
View(df_idn)
df_idn <- data %>% filter(name == "Indonesia") %>% na-omit()
df_idn <- data %>% filter(name == "Indonesia") %>% na.omit()
ggplot(data = df_idn, aes(x = date)) + geom_line(aes(y = dollar_price)) + geom_line(aes(y = gdp_dollar))
ggplot(data = df_idn, aes(x = date)) + geom_line(aes(y = local_price))
# Get the Data
# Read in with tidytuesdayR package
# Install from CRAN via: install.packages("tidytuesdayR")
# This loads the readme and all the datasets for the week of interest
# Either ISO-8601 date or year/week works!
tuesdata <- tidytuesdayR::tt_load('2021-02-16')
tuesdata <- tidytuesdayR::tt_load(2021, week = 8)
georgia_pop <- tuesdata$georgia_pop
# Or read in the data manually
georgia_pop <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/georgia_pop.csv')
census <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/census.csv')
furniture <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/furniture.csv')
city_rural <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/city_rural.csv')
income <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/income.csv')
freed_slaves <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/freed_slaves.csv')
occupation <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/occupation.csv')
conjugal <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/conjugal.csv')
View(census)
View(city_rural)
View(freed_slaves)
View(furniture)
View(georgia_pop)
View(income)
View(occupation)
View(conjugal)
View(city_rural)
View(census)
censusplot <- census %>% filter(region == "USA Total") %>% arrange(year) %>% ggplot(aes(x = year)) + geom_bar(aes(y = white)) + geom_bar(aes(y = black_slaves))
library(tidyverse)
library(plotly)
censusplot <- census %>% filter(region == "USA Total") %>% arrange(year) %>% ggplot(aes(x = year)) + geom_bar(aes(y = white)) + geom_bar(aes(y = black_slaves))
censusplot
censusplot <- census %>% filter(region == "USA Total") %>% arrange(year) %>% ggplot(aes(x = year)) + geom_bar(aes(y = white), stat = "identity") + geom_bar(aes(y = black_slaves), stat = "identity")
censusplot
censusplot <- census %>% filter(region == "USA Total") %>% arrange(year) %>% select(year, white, black_free, black_slaves) %>% pivot_longer(!year, names_to = "vars", value_to = "pct") %>% ggplot(aes(x = year)) + geom_bar(aes(y = pct, fill = vars), stat = "identity")
censusplot <- census %>% filter(region == "USA Total") %>% arrange(year) %>% select(year, white, black_free, black_slaves) %>% pivot_longer(!year, names_to = "vars", values_to = "pct") %>% ggplot(aes(x = year)) + geom_bar(aes(y = pct, fill = vars), stat = "identity")
censusplot
censusplot <- census %>% filter(region == "USA Total") %>% arrange(year) %>% select(year, white, black_free, black_slaves) %>% pivot_longer(!year, names_to = "vars", values_to = "pct") %>% ggplot(aes(x = year)) + geom_bar(aes(y = pct, fill = vars), stat = "identity", position = "dodge")
censusplot
censusplot <- census %>% filter(region == "USA Total") %>% arrange(year) %>% select(year, black_free, black_slaves) %>% pivot_longer(!year, names_to = "vars", values_to = "pct") %>% ggplot(aes(x = year)) + geom_bar(aes(y = pct, fill = vars), stat = "identity", position = "dodge")
censusplot
incomeplot <- income %>% pivot_longer(c("Rent", "Food", "Clothes", "Tax", "Other"))
head(incomeplot)
incomeplot <- income %>% pivot_longer(c("Rent", "Food", "Clothes", "Tax", "Other")) %>% ggplot(aes(x = Class)) + geom_bar(aes(y = value, fill = name))
incomeplot
incomeplot <- income %>% pivot_longer(c("Rent", "Food", "Clothes", "Tax", "Other")) %>% ggplot(aes(x = Class)) + geom_bar(aes(y = value, fill = name), stat = "identity")
incomeplot
incomeplot <- income %>% pivot_longer(c("Rent", "Food", "Clothes", "Tax", "Other")) %>% ggplot(aes(x = Class)) + geom_bar(aes(y = value, fill = factor(name, levels = c("Rent", "Food", "Clothes", "Tax", "Other"))), stat = "identity", position = "stack")
incomeplot
incomeplot <- income %>% pivot_longer(c("Rent", "Food", "Clothes", "Tax", "Other")) %>% ggplot(aes(x = Class)) + geom_bar(aes(y = value, fill = factor(name, levels = c("Other", "Tax", "Clothes", "Food", "Rent"))), stat = "identity", position = "stack")
incomeplot
tuesdata <- tidytuesdayR::tt_load('2021-03-16')
tuesdata <- tidytuesdayR::tt_load(2021, week = 12)
games <- tuesdata$games
View(games)
unique(games$gamename)
games %>% filter(year == "2020")
library(tidyverse)
games %>% filter(year == "2020")
games %>% filter(year == "2020") %>% arrange(month)
games$yearmonth <- as_date(with(games, paste(year, month, sep = "-")))
library(lubridate)
games$yearmonth <- as_date(with(games, paste(year, month, sep = "-")))
games$yearmonth <- as_date(with(games, paste(year, month, sep = "-")), "%Y-%m")
games$yearmonth <- as.Date(with(games, paste(year, month, sep = "-")), "%Y-%m")
games$yearmonth <- as.Date(with(games, paste(year, month, sep = "-")), "%Y-%m")
games$yearmonth <- as.Date(with(games, paste(year, month, sep = "-")), "%Y-%m")
games$yearmonth <- as.Date(with(games, paste(year, month, sep = "-")), format = "%Y-%m")
games$yearmonth <- as.Date(paste(games$year, games$month, sep = "-"), format = "%Y-%m")
games$yearmonth <- as.Date(paste(games$month, games$year, sep = "-"), format = "%m-Y")
games$yearmonth <- as_date(paste(games$month, games$year, sep = "-"), format = "%m-Y")
paste(games$year, games$month)
games$yearmonth <- as_date(paste(games$month, games$year), format = "%m Y")
games$yearmonth <- as_date(paste(games$month, games$year))
games$yearmonth <- as_date(paste(games$month, games$year), formats = "%m %Y")
games$yearmonth <- as_date(paste(games$month, games$year), format = "%m %Y")
View(games)
games$yearmonth <- as.Date(paste(games$month, games$year), format = "%m %Y")
games$yearmonth <- as.Date(ISOdate(year = games$year, month = games$month))
month.abb
match(substr(games$month, 1, 3), month.abb)
games$yearmonth <- as.Date(paste(games$year, match(substr(games$month, 1, 3), month.abb)), format = "%Y %m")
games$yearmonth <- as_date(paste(games$year, match(substr(games$month, 1, 3), month.abb)), format = "%Y %m")
paste(games$year, match(substr(games$month, 1, 3), month.abb))
games$yearmonth <- as_date(paste(games$year, games$month), format = "%Y %B")
library(zoo)
library(tidyverse)
library(lubridate)
library(zoo)
games$yearmonth <- as.yearmon(paste(games$year, games$month), format = "%Y %B")
tuesdata <- tidytuesdayR::tt_load('2021-03-16')
tuesdata <- tidytuesdayR::tt_load(2021, week = 12)
games <- tuesdata$games
games %>% filter(year == "2020") %>% arrange(month)
games$yearmonth <- as.yearmon(paste(games$year, games$month), format = "%Y %B")
library(plotly)
plot_ly(data = games, x = ~yearmonth) %>% add_lines(y = ~avg)
ggplot(data = games, aes(x = yearmonth)) + geom_line(aes(y = avg, group = gamename))
ggplot(data = games, aes(x = yearmonth)) + geom_line(aes(y = avg, color = gamename))
ggplot(data = filter(games, avg >= 500000), aes(x = yearmonth)) + geom_line(aes(y = avg, color = gamename))
ggplot(data = filter(games, avg >= 100000), aes(x = yearmonth)) + geom_line(aes(y = avg, color = gamename))
ggplot(data = filter(games, gamename -= "Dota 2"), aes(x = yearmonth)) + geom_line(aes(y = avg, color = gamename))
ggplot(data = filter(games, gamename == "Dota 2"), aes(x = yearmonth)) + geom_line(aes(y = avg, color = gamename))
ggplot(data = filter(games, gamename %in% c("Dota 2", "Apex Legends")), aes(x = yearmonth)) + geom_line(aes(y = avg, color = gamename))
ggplot(data = filter(games, gamename %in% c("Dota 2", "PLAYERUNKNOWN'S BATTLEGROUNDS")), aes(x = yearmonth)) + geom_line(aes(y = avg, color = gamename))
ggplot(data = filter(games, gamename %in% c("Fallout")), aes(x = yearmonth)) + geom_line(aes(y = avg, color = gamename))
ggplot(data = filter(games, grepl("Fallout", gamename)) + geom_line(aes(y = avg, color = gamename))
ggplot(data = filter(games, grepl("Fallout", gamename))) + geom_line(aes(y = avg, color = gamename))
ggplot(data = filter(games, grepl("Fallout", gamename)), aes(x = yearmonth)) + geom_line(aes(y = avg, color = gamename))
games <- tuesdata$games %>% mutate(avg_peak_perc = parse_number(avg_peak_perc)/100, yearmonth = as.yearmon(paste(games$year, games$month), format = "%Y %B"))
ggplot(data = filter(games, grepl("Fallout", gamename)), aes(x = yearmonth)) + geom_line(aes(y = avg_peak_prc, color = gamename))
ggplot(data = filter(games, grepl("Fallout", gamename)), aes(x = yearmonth)) + geom_line(aes(y = avg_peak_perc, color = gamename))
parse_date(paste(games$month, games$year))
parse_date(paste(games$month, games$year), "%B %Y")
games <- tuesdata$games %>% mutate(avg_peak_perc = parse_number(avg_peak_perc)/100, yearmonth = parse_date(paste(games$month, games$year), "%B %Y"))
install.packages("IRKernel")
install.packages("IRkernel")
IRkernel::installspec(user = FALSE)
IRkernel::installspec(user = FALSE)
library(tidyverse)
library(rvest)
library(janitor)
library(httr2)
index <- rvest::read_html_live("https://archive.org/download/20250128-cdc-datasets")
meta_urls <- index |>
rvest::html_element(".download-directory-listing") |>
rvest::html_table() |>
janitor::clean_names() |>
dplyr::filter(stringr::str_ends(name, "-meta.csv")) |>
dplyr::mutate(
url = paste0(
"https://archive.org/download/20250128-cdc-datasets/",
URLencode(name)
)
) |>
dplyr::select(url)
rm(index)
# As of 2025-02-03, there are 1257 metadata CSVs available. We will load each
# one and widen it, then stitch them all together. This can take a very long
# time.
requests <- meta_urls$url |>
purrr::map(\(url) {
httr2::request(url) |>
httr2::req_retry(
max_tries = 10,
is_transient = \(resp) {
httr2::resp_status(resp) %in% c(429, 500, 503)
},
# Always wait 10 seconds to retry. It seems to be a general throttle,
# but they don't tell us how long they need us to back off.
backoff = \(i) 10
)
})
resps <- httr2::req_perform_sequential(requests, on_error = "continue")
reqs_to_retry <- resps |>
httr2::resps_failures() |>
purrr::map("request")
resps2 <- httr2::req_perform_sequential(reqs_to_retry)
resps <- c(httr2::resps_successes(resps), httr2::resps_successes(resps2))
extract_cdc_dataset_row <- function(resp) {
httr2::resp_body_string(resp) |>
stringr::str_trim()
}
cdc_datasets <- tibble::tibble(
dataset_url = purrr::map_chr(resps, c("request", "url")),
raw = httr2::resps_data(resps, extract_cdc_dataset_row)
) |>
tidyr::separate_longer_delim(raw, delim = "\r\n") |>
dplyr::filter(stringr::str_detect(raw, ",")) |>
tidyr::separate_wider_delim(
raw,
delim = ",",
names = c("field", "value"),
too_many = "merge",
too_few = "align_start"
) |>
# Remove opening/closing quotes and trailing commas.
dplyr::mutate(
value = stringr::str_trim(value),
value = dplyr::if_else(
stringr::str_starts(value, '"') & stringr::str_ends(value, '"') &
!stringr::str_detect(stringr::str_sub(value, 2, -2), '"'),
stringr::str_sub(value, 2, -2),
value
) |>
stringr::str_remove(",\\s*$") |>
dplyr::na_if("") |>
dplyr::na_if("NA") |>
dplyr::na_if("n/a") |>
dplyr::na_if("N/A")
) |>
dplyr::distinct() |>
dplyr::filter(!is.na(value)) |>
tidyr::pivot_wider(
id_cols = c(dataset_url),
names_from = field,
values_from = value,
# Paste the contents of multi-value fields together.
values_fn = \(x) {
paste(unique(x), collapse = "\n")
}
) |>
janitor::clean_names() |>
dplyr::mutate(
tags = purrr::map2_chr(tags, theme, \(tags, theme) {
if (!is.na(theme)) {
paste(tags, theme, sep = ", ")
} else {
tags
}
}),
language = dplyr::case_match(
language,
"English" ~ "en-US",
.default = language
)
) |>
dplyr::mutate(
dplyr::across(
c("public_access_level", "update_frequency"),
tolower
)
) |>
# Manually dropped identified meaningless columns.
dplyr::select(
-resource_name,
-system_of_records,
-theme,
-is_quality_data
)
omb_codes <- readr::read_csv("https://resources.data.gov/schemas/dcat-us/v1.1/omb_bureau_codes.csv") |>
janitor::clean_names() |>
dplyr::mutate(
cgac_code = dplyr::na_if(cgac_code, "n/a")
)
fpi_codes <- readr::read_csv("https://resources.data.gov/schemas/dcat-us/v1.1/FederalProgramInventory_FY13_MachineReadable_091613.csv") |>
janitor::clean_names()
