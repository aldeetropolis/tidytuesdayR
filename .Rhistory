knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
df <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-25/measles.csv')
View(df)
install.packages("imputeTS")
dir.create("D:\", recursive = TRUE)
## Load Packages
```{r}
library(tidyverse)
```
## Load Data
```{r message=FALSE, warning=FALSE}
df <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-25/measles.csv')
```
## Including Plots
You can also embed plots, for example:
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
dir.create(tempPath, recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(tidytuesdayR)
library(hrbrthemes)
library(patchwork)
tt <- tt_load("2020-07-14")
astronauts <- tt$astronauts %>%
mutate(sex = str_to_sentence(sex),
military_civilian = str_to_sentence(military_civilian))
astronauts %>%
ggplot(aes(x = year_of_mission, fill = paste(sex, military_civilian), alpha = paste(sex, military_civilian))) +
geom_histogram(stat = "count", color = NA) +
scale_fill_manual(values = c("#482576", "#482576", "#43BF71", "#43BF71"), labels = c("", "", " Civilians", " Military")) +
scale_alpha_manual(values = c(0.5, 0.9, 0.5, 0.9), labels = c("", "", " Civilians", " Military")) +
facet_wrap(~sex) +
scale_y_continuous(expand = c(0,0)) +
theme_ipsum_ps(grid = "Yy",
ticks = TRUE) +
# Uncoment for small legends in the corners of the plot so they can be stand-still
# guides(fill = guide_legend(title = NULL, nrow = 2),
#        alpha = guide_legend(title = NULL, nrow = 2)) +
theme(legend.position = "none",
# legend.position = c(0.02, 0.9),
# legend.justification = "left",
# legend.spacing.x =  unit(0, "lines"),
# legend.spacing.y =  unit(0, "lines"),
# legend.background = element_rect(fill = "#FFFFFFFF", color = NA),
# legend.key.width = unit(1, "lines"),
# legend.key.height = unit(0.3, "lines"),
axis.ticks.y = element_blank(),
plot.caption.position = "plot") +
labs(title = "Astronauts in all space missions",
x = "Year",
y = "Number of missions",
caption = "* Same Astronauts flying multiple times.") -> plt_all_missions
astronauts %>%
group_by(name) %>%
filter(year_of_mission == min(year_of_mission)) %>%
ggplot(aes(x = year_of_mission, fill = paste(sex, military_civilian), alpha = paste(sex, military_civilian))) +
geom_histogram(stat = "count", color = NA) +
scale_fill_manual(values = c("#482576", "#482576", "#43BF71", "#43BF71"), labels = c("", "", " Civilians", " Military")) +
scale_alpha_manual(values = c(0.5, 0.9, 0.5, 0.9), labels = c("", "", " Civilians", " Military")) +
facet_wrap(~sex) +
scale_y_continuous(expand = c(0,0)) +
theme_ipsum_ps(grid = "Yy",
ticks = TRUE) +
# Uncomment for small legend in corner of the plot
# guides(fill = guide_legend(title = NULL, nrow = 2),
#        alpha = guide_legend(title = NULL, nrow = 2)) +
theme(legend.position = "none",
# legend.position = c(0.02, 0.9),
# legend.justification = "left",
# legend.spacing.x =  unit(0, "lines"),
# legend.spacing.y =  unit(0, "lines"),
# legend.background = element_rect(fill = "#FFFFFFFF", color = NA),
# legend.key.width = unit(1, "lines"),
# legend.key.height = unit(0.3, "lines"),
axis.ticks.y = element_blank(),
plot.caption.position = "plot") +
labs(title = "Astronauts on their first mission",
x = "Year of first mission",
y = "Number of first-time Astronauts") -> plt_first_mission
astronauts %>%
select(name, sex, military_civilian) %>%
unique() %>%
count(name) %>%
arrange(desc(n)) %>%
filter(n == 2) %>%
left_join(astronauts)
astronauts %>%
select(name, sex, military_civilian, year_of_birth) %>%
unique() %>%
group_by(sex, military_civilian) %>%
summarise(n = n()) %>%
mutate(n_sex = sum(n)) %>%
ungroup() %>%
mutate(sex_perc = n_sex / sum(n_sex) * 2) -> astronauts_tally
labels_df <- group_by(astronauts_tally, sex) %>%
filter(n != 0) %>%
arrange(desc(military_civilian)) %>%
mutate(y = (cumsum(n) - 0.5*n)/n_sex)
astronauts_tally %>%
ggplot(aes(x = sex, y = n, fill = sex, width = sex_perc, alpha = military_civilian)) +
geom_bar(stat = "identity", position = "fill", colour = "white", size = 1) +
geom_text(data = labels_df,
aes(y = y, label = n, color = military_civilian),
family = "IBMPlexSans-Bold"
) +
scale_fill_manual(values = c("#482576", "#43BF71"), guide = FALSE) +
scale_alpha_manual(values = c(0.5, 0.9), guide = FALSE) +
scale_color_manual(values = c("black", "white"), guide = FALSE) +
facet_grid(~ sex, scales = "free_x", space = "free_x") +
scale_y_continuous(name = NULL,
expand = c(0, 0),
breaks = NULL,
labels = NULL,
sec.axis = dup_axis(
breaks = filter(labels_df, sex == "Male")$y,
labels = filter(labels_df, sex == "Male")$military_civilian
)
) +
scale_x_discrete(expand = c(0,0)) +
coord_cartesian(clip = "off") +
theme_ipsum_ps(grid = "") +
labs(x = "", y = "", title = "All Astronauts") +
theme(
axis.text.y.right = element_text(angle = 90, hjust = 0.5, size = 12),
line = element_blank(),
strip.text = element_blank(),
# axis.ticks.length = unit(0, "pt"),
panel.spacing.x = unit(0, "pt")
) -> plt_breakdown
patched_plot <- (plt_all_missions / plt_first_mission) | plt_breakdown
astronauts %>%
group_by(sex) %>%
filter(year_of_mission == min(year_of_mission)) %>%
select(name, year_of_mission)
astronauts %>%
filter(year_of_mission == max(year_of_mission)) %>%
select(year_of_mission, name) %>%
unique()
astronauts %>%
select(name, year_of_birth) %>%
unique() %>%
nrow() -> total_persons
nrow(astronauts) -> total_missions
combined_plot_astr <- patched_plot + plot_layout(widths = c(6, 1)) +
plot_annotation(title = "Sex and military/civilian status of astronauts",
subtitle = str_glue("Historical overview of persons in space ",
"(all {total_missions} missions by {total_persons} individuals), ",
"from Yuri Gagarin in 1961 and Valentina Tereshkova in 1963 to 9 persons flying in 2019.",
"\nTrivia: only two persons in space had the same name (Aleksandr Aleksandrov from USSR and Aleksandr Aleksandrov from Bulgaria)."),
caption = "@vasingtonskver on #TidyTuesday week 29 in 2020, data from Mariya Stavnichuk and Tatsuya Corlett.") &
theme(plot.title = element_text(family = "IBMPlexSans-Bold", size = 18, face = "plain", margin = margin(t = 10, r = 10, b = 10, l = 10, unit = "pt")),
plot.subtitle = element_text(family = "IBMPlexSans-Light", size = 13, face = "plain"),
plot.caption = element_text(family = "IBMPlexSans-Thin", size = 9, face = "plain", margin = margin(t = 10, r = 10, b = 10, l = 10, unit = "pt")))
gg_check(combined_plot_astr)
combined_plot_astr + ggsave("tt_2020-29_astronauts.png", device = "png", width = 15, height = 10, dpi = 300)
library(tidyverse)
library(tidytuesdayR)
library(hrbrthemes)
library(patchwork)
tt <- tt_load("2020-07-14")
View(tt)
astronauts <- tt$astronauts %>%
mutate(sex = str_to_sentence(sex), military_civilian = str_to_sentence(military_civilian))
View(astronauts)
?str_to_sentence
library(tidyverse)
library(tidytuesdayR)
data <- tt_load(2020, week = 32)
View(data)
en_types <- data$energy_types
country <- data$country_totals
View(country)
View(en_types)
en_types$country_name[is.na(en_types$country_name) & en_types$country == "UK"] <- "United Kingdom"
View(country)
en_types$country_name[is.na(en_types$country_name) & en_types$country == "UK"] <- "United Kingdom"
country$country_name[is.na(country$country_name) & country$country == "UK"] <- "United Kingdom"
nuke_prod <- en_types %>% filter(type == "Nuclear")
View(nuke_prod)
ggplot(data = en_types, aes(x = type, y = 2016) + geom_bar()
ggplot(data = en_types, aes(x = type, y = 2016)) + geom_bar()
ggplot(data = en_types, aes(x = type, y = 2016)) + geom_bar()
ggplot(data = en_types, aes(y = 2016)) + geom_bar()
ggplot(data = en_types, aes(x = 2016)) + geom_bar()
glimpse(nuke_prod)
ggplot(data = en_types, aes(x = country_name, y = `2016`)) + geom_bar()
ggplot(data = en_types, aes(x = country_name, y = `2016`)) + geom_bar(stat = "identity")
ggplot(data = en_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
nuc_ctrys <- en_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(desc(nuc_pct)) %>%
select(country_name) %>%
pull()
# Make country_name a factor based on the order we made earlier.
en_types$country_name <- factor(energy_types$country_name, nuc_ctrys)
ggplot(data = en_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
nuc_ctrys <- en_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(desc(nuc_pct)) %>%
select(country_name) %>%
pull()
# Make country_name a factor based on the order we made earlier.
en_types$country_name <- factor(en_types$country_name, nuc_ctrys)
ggplot(data = en_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
View(nuc_ctrys)
en_types$type <- forcats::fct_relevel(en_types$type, "Nuclear")
# Get list of country names ordered by nuclear's percent of total.
# This list will be used later to order the factor for sorting on the chart.
nuc_ctrys <- en_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(desc(nuc_pct)) %>%
select(country_name) %>%
pull()
# Make country_name a factor based on the order we made earlier.
en_types$country_name <- factor(en_types$country_name, nuc_ctrys)
ggplot(data = en_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
nuc_ctrys <- en_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(-nuc_pct) %>%
select(country_name) %>%
pull()
library(tidyverse)
library(tidytuesdayR)
nuc_ctrys <- en_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(-nuc_pct) %>%
select(country_name) %>%
pull()
data <- tt_load(2020, week = 32)
energy_types <- data$energy_types
country_totals <- data$country_totals
energy_types$country_name[is.na(energy_types$country_name) & energy_types$country == "UK"] <- "United Kingdom"
country_types$country_name[is.na(country_types$country_name) & country_types$country == "UK"] <- "United Kingdom"
# plot nuclear energy production of each country
nuke_prod <- energy_types %>% filter(type == "Nuclear")
ggplot(data = energy_types, aes(x = country_name, y = `2016`)) + geom_bar(stat = "identity")
# Reorder Nuclear to be the first energy type in the legend.
energy_types$type <- forcats::fct_relevel(energy_types$type, "Nuclear")
# Get list of country names ordered by nuclear's percent of total.
# This list will be used later to order the factor for sorting on the chart.
nuc_ctrys <- energy_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(-nuc_pct) %>%
select(country_name) %>%
pull()
# Make country_name a factor based on the order we made earlier.
energy_types$country_name <- factor(energy_types$country_name, nuc_ctrys)
ggplot(data = energy_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
data <- tt_load(2020, week = 32)
energy_types <- data$energy_types
country_totals <- data$country_totals
energy_types$country_name[is.na(energy_types$country_name) & energy_types$country == "UK"] <- "United Kingdom"
country_totals$country_name[is.na(country_totals$country_name) & country_totals$country == "UK"] <- "United Kingdom"
# plot nuclear energy production of each country
nuke_prod <- energy_types %>% filter(type == "Nuclear")
ggplot(data = energy_types, aes(x = country_name, y = `2016`)) + geom_bar(stat = "identity")
# Reorder Nuclear to be the first energy type in the legend.
energy_types$type <- forcats::fct_relevel(energy_types$type, "Nuclear")
# Get list of country names ordered by nuclear's percent of total.
# This list will be used later to order the factor for sorting on the chart.
nuc_ctrys <- energy_types %>%
group_by(country_name) %>%
mutate(nuc_pct = `2018`/sum(`2018`)) %>%
filter(type == "Nuclear") %>%
arrange(-nuc_pct) %>%
select(country_name) %>%
pull()
# Make country_name a factor based on the order we made earlier.
energy_types$country_name <- factor(energy_types$country_name, nuc_ctrys)
ggplot(data = energy_types) +
geom_bar(aes(x=country_name, y=`2018`, fill=type), stat = "identity", position = "fill") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25, face = "bold", size = 8),
axis.title.x = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
plot.caption = element_text(hjust = 1.48)) +
labs(title = "How do European countries produce their energy?",
subtitle = "2018 percent of total",
caption = "Source: Eurostat",
y = "Percent of Power Generation") +
guides(fill = guide_legend(title = "Energy Type")) +
scale_y_continuous(labels = scales::percent)
library(tidyverse)
library(rvest)
# Hospital TBI data -------------------------------------------------------
all_years <- read_html("https://www.cdc.gov/traumaticbraininjury/data/tbi-edhd.html") %>%
html_node(xpath = '//*[@id="acc-panel-1"]/div/div/table/thead/tr') %>%
html_text() %>%
str_split("\\\n") %>%
str_extract_all("[0-9]+") %>%
simplify()
hospital_url <- "https://www.cdc.gov/traumaticbraininjury/data/tbi-edhd.html"
raw_html_hospital <- read_html(url)
get_table_row <- function(input_html, tab_num){
node <- html_node(input_html, xpath = glue::glue('//*[@id="acc-panel-1"]/div/div/table/tbody/tr[{tab_num}]'))
html_text(node)
}
tbi_hospital <- tibble(
input_html = list(raw_html_hospital),
tab_num = 1:4
) %>%
mutate(raw_data = map2_chr(input_html, tab_num, get_table_row)) %>%
separate(raw_data, into = c("type", all_years), sep = "\\\n") %>%
select(-tab_num,-input_html) %>%
pivot_longer(cols = -type, values_to = "value", names_to = "year") %>%
mutate(value = parse_number(value),
year = as.double(year))
raw_html_hospital <- read_html(url)
raw_html_hospital <- read_html(hospital_url)
get_table_row <- function(input_html, tab_num){
node <- html_node(input_html, xpath = glue::glue('//*[@id="acc-panel-1"]/div/div/table/tbody/tr[{tab_num}]'))
html_text(node)
}
tbi_hospital <- tibble(
input_html = list(raw_html_hospital),
tab_num = 1:4
) %>%
mutate(raw_data = map2_chr(input_html, tab_num, get_table_row)) %>%
separate(raw_data, into = c("type", all_years), sep = "\\\n") %>%
select(-tab_num,-input_html) %>%
pivot_longer(cols = -type, values_to = "value", names_to = "year") %>%
mutate(value = parse_number(value),
year = as.double(year))
View(tbi_hospital)
library(tidytuesdayR)
data <- tt_load(2020, week = 52)
View(data)
data <- data$`big-mac`
View(data)
df_asean <- data %>% filter(name %in% ("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam")
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam"))
df_asean <- data %>% filter(name %in% ("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam"))
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam"))
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam"))
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam"))
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam", "Phillipines"))
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam", "Philippines"))
library(tidyverse)
df_asean <- data %>% filter(name %in% c("Indonesia", "Myanmar", "Malaysia", "Singapore", "Thailand", "Vietnam", "Philippines"))
View(df_asean)
ggplot(data = df_asean, aes(x = date, y = local_price, fill = name)) + geom_line()
ggplot(data = df_asean, aes(x = date, y = local_price, fill = name)) + geom_line(stat = "identity")
